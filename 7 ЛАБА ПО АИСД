'''
Лабораторная работа №7
Требуется для своего варианта второй части л.р. №6 (усложненной программы) написать объектно-ориентированную реализацию.
В программе должны быть реализованы минимум один класс, три атрибута, два метода

Вариант 24. У няни неограниченное количество  фруктов К разных названий (ф1,…фК).
Сформировать (вывести) все возможные варианты меню полдника (1 фрукт) для ребенка на неделю.
'''
import random

class Product:
    def __init__(self, num_fruits):
        self.num_fruits = num_fruits
        self.fruits = ['ф' + str(i) for i in range(1, self.num_fruits + 1)]
        self.calories = self.generate_calories_dict()

    def generate_calories_dict(self):
        return {fruit: random.randint(40, 140) for fruit in self.fruits}

class GenerationMenu:
    def __init__(self, num_weeks, fruits, calories):
        self.num_weeks = num_weeks
        self.fruit_combinations = []
        self.fruits = fruits
        self.calories = calories

    def get_week_menu(self):
        days = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье']
        for week in range(1, self.num_weeks + 1):
            while True:
                week_fruits = random.sample(self.fruits, 7)
                week_fruits_tuple = tuple(sorted(week_fruits))
                if week_fruits_tuple not in self.fruit_combinations:
                    self.fruit_combinations.append(week_fruits_tuple)
                    break
            print(f"\nНеделя {week}:")
            for day, fruit in zip(days, week_fruits):
                print(f" {day}: {fruit} - {self.calories[fruit]}")
        return self.fruit_combinations

class MaxCal:
    def __init__(self, week_fruits, calories):
        self.week_fruits = week_fruits
        self.calories = calories
        self.total_calories = self.calculate_total_calories()
        self.max_calories = self.calculate_max_calories()
        self.max_calories_fruits = self.calculate_max_calories_fruits()

    def calculate_total_calories(self):
        return sum(self.calories[fruit] for fruit in self.week_fruits)

    def calculate_max_calories(self):
        return max(self.calories[fruit] for fruit in self.week_fruits)

    def calculate_max_calories_fruits(self):
        max_calories = self.calculate_max_calories()
        return [fruit for fruit in self.week_fruits if self.calories[fruit] == max_calories]

    def get_calories_info(self):
        return self.total_calories, self.max_calories, self.max_calories_fruits

while True:
    num_fruits = int(input('Введите количество различных фруктов (больше 7): '))
    if num_fruits > 7:
        break
    print("Извините, слишком мало фруктов для создания разнообразного меню на все дни недели.")

while True:
    num_weeks = int(input('Введите число недель, на которые будет составлено меню: '))
    if num_weeks > 0:
        break
    print("Введено некорректное количество недель. Пожалуйста, введите число больше нуля.")

product = Product(num_fruits)
menu_generator = GenerationMenu(num_weeks, product.fruits, product.calories)
menu_generator.get_week_menu()

maxCal = MaxCal(menu_generator.fruit_combinations[0], product.calories)
print(f"Общее количество калорий за неделю: {maxCal.get_calories_info()[0]}")
print(f"Самый калорийный фрукт за неделю: {maxCal.get_calories_info()[2]} - {maxCal.get_calories_info()[1]}")
