'''
Лабораторная работа №7
Требуется для своего варианта второй части л.р. №6 (усложненной программы) написать объектно-ориентированную реализацию.
В программе должны быть реализованы минимум один класс, три атрибута, два метода.

Вариант 24. У няни неограниченное количество  фруктов К разных названий (ф1,…фК).
Сформировать (вывести) все возможные варианты меню полдника (1 фрукт) для ребенка на неделю.
'''
import random

def get_combinations(sequence, comb_length):
    if not sequence:
        return []
    elif comb_length == 0:
        return [[]]
    else:
        head = sequence[:1]
        tail = sequence[1:]
        new_comb = [head + pair for pair in get_combinations(tail, comb_length - 1)]
        return new_comb + get_combinations(tail, comb_length)

class Fruit:
    def __init__(self, num_fruits):
        self.num_fruits = num_fruits
        self.fruits = ['ф' + str(i) for i in range(1, self.num_fruits + 1)]
        self.calories = self.generate_calories_dict()

    def generate_calories_dict(self):
        return {fruit: random.randint(40, 140) for fruit in self.fruits}

class GenerationMenu:
    def __init__(self, num_weeks, fruits, calories):
        self.num_weeks = num_weeks
        self.fruits = fruits
        self.calories = calories
        self.unique_week_combinations = []
        for i in range(7, len(fruits) + 1):
            self.unique_week_combinations += get_combinations(self.fruits, i)
        random.shuffle(self.unique_week_combinations) # shuffle the combinations

    def get_week_menu(self):
        days = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота',
                'Воскресенье']
        for week_num in range(1, self.num_weeks + 1):
            for week_fruits_list in self.unique_week_combinations:
                if len(week_fruits_list) == 7:
                    print(f"\nНеделя {week_num}:")
                    for day, fruit in zip(days, week_fruits_list):
                        print(f" {day}: {fruit} - {self.calories[fruit]} калл.")
                    max_cal = MaxCal(week_fruits_list, self.calories)
                    print(f"Самый калорийный фрукт за неделю: "
                          f"{max_cal.calculate_max_calories_fruits()} - "
                          f"{max_cal.calculate_max_calories()} калл.")

class MaxCal:
    def __init__(self, week_fruits, calories):
        self.week_fruits = week_fruits
        self.calories = calories

    def calculate_max_calories(self):
        return max(self.calories[fruit] for fruit in self.week_fruits)

    def calculate_max_calories_fruits(self):
        max_calories = self.calculate_max_calories()
        return [fruit for fruit in self.week_fruits if self.calories[fruit] == max_calories]

while True:
    num_fruits = int(input('Введите количество различных фруктов (больше 7): '))
    if num_fruits > 7:
        break
    print("Извините, слишком мало фруктов для создания разнообразного меню на все дни недели.")

while True:
    num_weeks = int(input('Введите число недель, на которые будет составлено меню: '))
    if num_weeks > 0:
        break
    print("Введено некорректное количество недель. Пожалуйста, введите число больше нуля.")

product = Fruit(num_fruits)
menu_generator = GenerationMenu(num_weeks, product.fruits, product.calories)
menu_generator.get_week_menu()


